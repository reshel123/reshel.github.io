/* LeanCloud Realtime SDK 最小化替代版本 */
window.Realtime = function(options) {
  this.createIMClient = function(clientId) {
    console.log('创建Realtime客户端:', clientId);
    
    // 创建模拟客户端，确保它有on方法
    const mockClient = {
      id: clientId,
      on: function(event, callback) {
        console.log('客户端注册事件:', event);
        // 存储回调，以便可以手动触发
        if (!this._eventCallbacks) this._eventCallbacks = {};
        if (!this._eventCallbacks[event]) this._eventCallbacks[event] = [];
        this._eventCallbacks[event].push(callback);
      },
      _trigger: function(event, data) {
        // 用于测试的手动触发方法
        if (this._eventCallbacks && this._eventCallbacks[event]) {
          this._eventCallbacks[event].forEach(cb => cb(data));
        }
      },
      close: function() {
        console.log('关闭客户端连接:', this.id);
        return Promise.resolve();
      },
      getConversation: function(convId) {
        console.log('获取对话:', convId);
        return Promise.resolve(createMockConversation(convId, clientId));
      },
      createConversation: function(options) {
        const convId = options.id || ('conv_' + Math.random().toString(36).substring(2, 15));
        console.log('创建新对话:', convId);
        return Promise.resolve(createMockConversation(convId, clientId, options.members || []));
      }
    };
    
    return Promise.resolve(mockClient);
  };
};

// 创建模拟对话实例
function createMockConversation(convId, clientId, members = []) {
  if (!members.includes(clientId)) {
    members.push(clientId);
  }
  
  return {
    id: convId,
    name: convId,
    members: members,
    creator: clientId,
    createdAt: new Date(),
    _messageListeners: [],
    
    send: function(message) { 
      console.log('发送消息到对话:', this.id, message);
      return Promise.resolve(message); 
    },
    
    on: function(event, callback) {
      console.log('对话注册事件:', event);
      if (event === 'message') {
        this._messageListeners.push(callback);
      }
      // 存储回调，以便可以手动触发
      if (!this._eventCallbacks) this._eventCallbacks = {};
      if (!this._eventCallbacks[event]) this._eventCallbacks[event] = [];
      this._eventCallbacks[event].push(callback);
    },
    
    off: function(event, callback) {
      console.log('移除事件监听:', event);
      if (event === 'message' && this._messageListeners) {
        const index = this._messageListeners.indexOf(callback);
        if (index !== -1) {
          this._messageListeners.splice(index, 1);
        }
      }
    },
    
    join: function() {
      console.log('加入对话:', this.id);
      return Promise.resolve();
    },
    
    add: function(members) {
      console.log('添加成员到对话:', members);
      this.members = this.members.concat(members.filter(m => !this.members.includes(m)));
      return Promise.resolve();
    },
    
    queryMessages: function(options) {
      console.log('查询消息历史:', options);
      return Promise.resolve([]);
    }
  };
}

// 确保AV存在且有Realtime属性
window.AV = window.AV || {};
window.AV.Realtime = window.AV.Realtime || {};
window.AV.Realtime.TextMessage = function(text) { 
  this.text = text; 
  this._lctext = text;
  this.from = 'system';
  this.timestamp = Date.now();
};

window.AV.Realtime.FileMessage = function(file) { 
  this.file = file; 
  this._lcfile = file;
  this.from = 'system';
  this.timestamp = Date.now();
};

// 创建typedMessages插件
window.TypedMessagesPlugin = {
  name: 'typed-messages'
};

console.log('本地 Realtime SDK 已加载 - 增强版');
